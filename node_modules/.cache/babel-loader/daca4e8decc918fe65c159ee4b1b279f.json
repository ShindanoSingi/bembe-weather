{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/Desktop/GeneralAssembly/Post-Graduation-Projects/react-weather/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport WeatherPage from './components/weatherPage';\nimport SearchForm from './components/SearchForm';\n\nfunction App() {\n  // Initialize variables using \"useSates\"\n  const [weatherData, setWeatherData] = useState([]);\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [country, setCountry] = useState(''); // These hold values a little bit longer\n\n  const [cityDisplayed, setCityDisplayed] = useState('');\n  const [stateDisplayed, setStateDisplayed] = useState('');\n  const [countryDisplayed, setCountryDisplayed] = useState(''); // Create an object that will hold keys to be used in the fetch fnctions.\n\n  const searchLatLon = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    cityName: city,\n    stateCode: '',\n    country: '',\n    limit: 1,\n    api: 'http://api.openweathermap.org/geo/1.0/direct?q='\n  };\n  let searchOptions = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    api: 'https://api.openweathermap.org/data/2.5/onecall?'\n  }; // Create handleChange function to capture input value for city from the form.\n\n  function handleChangeCity(event) {\n    setCity(event.target.value);\n  } // Create handleChange function to capture input value for city from the form.\n\n\n  function handleChangeState(event) {\n    setState(event.target.value);\n  } // Create handleChange function to capture input value for country from the form.\n\n\n  function handleChangeCountry(event) {\n    setCountry(event.target.value);\n  } // Create a handleSubmit function to send the input value to the getLatLon function.\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    getLatLon(city, state, country);\n    setCity('');\n    setState('');\n    setCountry('');\n  } // useEffect function\n\n\n  useEffect(() => {\n    getLatLon();\n    setCity('');\n    setState('');\n    setCountry(''); // eslint-disable-next-line\n  }, []); // This function below takes two parameters: city and country's code, and spits latitude and longitude out. Then, the next fetch takes the lat and lon, and spits eather data for eight days.\n\n  function getLatLon(city, state, country) {\n    fetch(`${searchLatLon.api}${city},${state},${country}&limit=${searchLatLon.limit}&appid=${searchLatLon.key}`).then(result => result.json()).then(data => {\n      // console.log(data[0])\n      if (data[0]) {\n        fetch(`${searchOptions.api}lat=${data[0].lat}&lon=${data[0].lon}&exclude=minutely,hourly&appid=${searchOptions.key}&units=imperial`).then(result => result.json()).then(result => {\n          setCityDisplayed(data[0].name);\n          setStateDisplayed(data[0].state);\n          setCountryDisplayed(data[0].country);\n          setWeatherData(result);\n        });\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchForm, {\n    city: city,\n    state: state,\n    country: country,\n    handleChangeCity: handleChangeCity,\n    handleChangeState: handleChangeState,\n    handleChangeCountry: handleChangeCountry,\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WeatherPage, {\n    weatherData: weatherData,\n    city: cityDisplayed,\n    state: stateDisplayed,\n    country: countryDisplayed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mymac/Desktop/GeneralAssembly/Post-Graduation-Projects/react-weather/src/App.js"],"names":["React","useState","useEffect","WeatherPage","SearchForm","App","weatherData","setWeatherData","city","setCity","state","setState","country","setCountry","cityDisplayed","setCityDisplayed","stateDisplayed","setStateDisplayed","countryDisplayed","setCountryDisplayed","searchLatLon","key","process","env","REACT_APP_GIPHY_KEY","cityName","stateCode","limit","api","searchOptions","handleChangeCity","event","target","value","handleChangeState","handleChangeCountry","handleSubmit","preventDefault","getLatLon","fetch","then","result","json","data","lat","lon","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport WeatherPage from './components/weatherPage';\nimport SearchForm from './components/SearchForm'\n\nfunction App() {\n\n    // Initialize variables using \"useSates\"\n    const [weatherData, setWeatherData] = useState([]);\n\n    const [city, setCity] = useState('');\n    const [state, setState] = useState('');\n    const [country, setCountry] = useState('');\n\n    // These hold values a little bit longer\n    const [cityDisplayed, setCityDisplayed] = useState('')\n    const [stateDisplayed, setStateDisplayed] = useState('')\n    const [countryDisplayed, setCountryDisplayed] = useState('')\n\n    // Create an object that will hold keys to be used in the fetch fnctions.\n    const searchLatLon = {\n        key: process.env.REACT_APP_GIPHY_KEY,\n        cityName: city,\n        stateCode: '',\n        country: '',\n        limit: 1,\n        api: 'http://api.openweathermap.org/geo/1.0/direct?q='\n    };\n\n    let searchOptions = {\n        key: process.env.REACT_APP_GIPHY_KEY,\n        api: 'https://api.openweathermap.org/data/2.5/onecall?',\n    };\n\n    // Create handleChange function to capture input value for city from the form.\n    function handleChangeCity(event) {\n        setCity(event.target.value);\n    }\n\n    // Create handleChange function to capture input value for city from the form.\n    function handleChangeState(event) {\n        setState(event.target.value);\n    }\n\n    // Create handleChange function to capture input value for country from the form.\n    function handleChangeCountry(event) {\n        setCountry(event.target.value);\n    }\n\n    // Create a handleSubmit function to send the input value to the getLatLon function.\n    function handleSubmit(event) {\n        event.preventDefault();\n        getLatLon(city, state, country);\n        setCity('')\n        setState('')\n        setCountry('')\n    }\n\n    // useEffect function\n    useEffect(() => {\n        getLatLon()\n        setCity('')\n        setState('')\n        setCountry('')\n        // eslint-disable-next-line\n    }, []);\n\n    // This function below takes two parameters: city and country's code, and spits latitude and longitude out. Then, the next fetch takes the lat and lon, and spits eather data for eight days.\n\n    function getLatLon(city, state, country) {\n        fetch(`${searchLatLon.api}${city},${state},${country}&limit=${searchLatLon.limit}&appid=${searchLatLon.key}`)\n            .then(result => result.json())\n            .then((data) => {\n                // console.log(data[0])\n                if (data[0]) {\n                    fetch(`${searchOptions.api}lat=${data[0].lat}&lon=${data[0].lon}&exclude=minutely,hourly&appid=${searchOptions.key}&units=imperial`)\n                        .then(result => result.json())\n                        .then((result) => {\n                            setCityDisplayed(data[0].name)\n                            setStateDisplayed(data[0].state)\n                            setCountryDisplayed(data[0].country)\n                            setWeatherData(result)\n                        });\n                }\n            }\n            )\n    }\n\n    return (\n\n        < div >\n            {/* Search form */}\n            <SearchForm\n                city={city}\n                state={state}\n                country={country}\n                handleChangeCity={handleChangeCity}\n                handleChangeState={handleChangeState}\n                handleChangeCountry={handleChangeCountry}\n                handleSubmit={handleSubmit}\n            />\n\n            {/* Weather data */}\n            <WeatherPage\n                weatherData={weatherData}\n                city={cityDisplayed}\n                state={stateDisplayed}\n                country={countryDisplayed}\n            />\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}