{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/Desktop/GeneralAssembly/Post-Graduation-Projects/bembe-weather/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport WeatherPage from \"./components/weatherPage\";\nimport SearchForm from \"./components/SearchForm\";\n\nfunction App() {\n  // Initialize variables using \"useSates\"\n  const [weatherData, setWeatherData] = useState([]);\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [country, setCountry] = useState(\"\"); // These hold values a little bit longer\n\n  const [cityDisplayed, setCityDisplayed] = useState(\"\");\n  const [stateDisplayed, setStateDisplayed] = useState(\"\");\n  const [countryDisplayed, setCountryDisplayed] = useState(\"\"); // Create an object that will hold keys to be used in the fetch fnctions.\n\n  const searchLatLon = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    cityName: city,\n    stateCode: \"\",\n    country: \"\",\n    limit: 1,\n    api: \"https://api.openweathermap.org/geo/1.0/direct?q=\"\n  };\n  let searchOptions = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    api: \"https://api.openweathermap.org/data/2.5/onecall?\"\n  }; // Create handleChange function to capture input value for city from the form.\n\n  function handleChangeCity(event) {\n    setCity(event.target.value);\n  } // Create handleChange function to capture input value for city from the form.\n\n\n  function handleChangeState(event) {\n    setState(event.target.value);\n  } // Create handleChange function to capture input value for country from the form.\n\n\n  function handleChangeCountry(event) {\n    setCountry(event.target.value);\n  } // Create a handleSubmit function to send the input value to the getLatLon function.\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    getLatLon(city, state, country);\n    setCity(\"\");\n    setState(\"\");\n    setCountry(\"\");\n  } // useEffect function\n\n\n  useEffect(() => {\n    getLatLon();\n    setCity(\"\");\n    setState(\"\");\n    setCountry(\"\"); // eslint-disable-next-line\n  }, []); // This function below takes two parameters: city and country's code, and spits latitude and longitude out. Then, the next fetch takes the lat and lon, and spits eather data for eight days.\n\n  function getLatLon(city, state, country) {\n    fetch(`${searchLatLon.api}${city},${state},${country}&limit=${searchLatLon.limit}&appid=${searchLatLon.key}`).then(result => result.json()).then(data => {\n      // console.log(data[0])\n      if (data[0]) {\n        fetch(`${searchOptions.api}lat=${data[0].lat}&lon=${data[0].lon}&exclude=minutely,hourly&appid=${searchOptions.key}&units=imperial`).then(result => result.json()).then(result => {\n          setCityDisplayed(data[0].name);\n          setStateDisplayed(data[0].state);\n          setCountryDisplayed(data[0].country);\n          setWeatherData(result);\n        });\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-blue-800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(WeatherPage, {\n    weatherData: weatherData,\n    city: cityDisplayed,\n    state: stateDisplayed,\n    country: countryDisplayed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SearchForm, {\n    city: city,\n    state: state,\n    country: country,\n    handleChangeCity: handleChangeCity,\n    handleChangeState: handleChangeState,\n    handleChangeCountry: handleChangeCountry,\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mymac/Desktop/GeneralAssembly/Post-Graduation-Projects/bembe-weather/src/App.js"],"names":["React","useState","useEffect","WeatherPage","SearchForm","App","weatherData","setWeatherData","city","setCity","state","setState","country","setCountry","cityDisplayed","setCityDisplayed","stateDisplayed","setStateDisplayed","countryDisplayed","setCountryDisplayed","searchLatLon","key","process","env","REACT_APP_GIPHY_KEY","cityName","stateCode","limit","api","searchOptions","handleChangeCity","event","target","value","handleChangeState","handleChangeCountry","handleSubmit","preventDefault","getLatLon","fetch","then","result","json","data","lat","lon","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC,CANa,CAQb;;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACiB,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAC,EAAD,CAAxD,CAXa,CAab;;AACA,QAAMmB,YAAY,GAAG;AACnBC,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADE;AAEnBC,IAAAA,QAAQ,EAAEjB,IAFS;AAGnBkB,IAAAA,SAAS,EAAE,EAHQ;AAInBd,IAAAA,OAAO,EAAE,EAJU;AAKnBe,IAAAA,KAAK,EAAE,CALY;AAMnBC,IAAAA,GAAG,EAAE;AANc,GAArB;AASA,MAAIC,aAAa,GAAG;AAClBR,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADC;AAElBI,IAAAA,GAAG,EAAE;AAFa,GAApB,CAvBa,CA4Bb;;AACA,WAASE,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/BtB,IAAAA,OAAO,CAACsB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GA/BY,CAiCb;;;AACA,WAASC,iBAAT,CAA2BH,KAA3B,EAAkC;AAChCpB,IAAAA,QAAQ,CAACoB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD,GApCY,CAsCb;;;AACA,WAASE,mBAAT,CAA6BJ,KAA7B,EAAoC;AAClClB,IAAAA,UAAU,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAzCY,CA2Cb;;;AACA,WAASG,YAAT,CAAsBL,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACM,cAAN;AACAC,IAAAA,SAAS,CAAC9B,IAAD,EAAOE,KAAP,EAAcE,OAAd,CAAT;AACAH,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAlDY,CAoDb;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,SAAS;AACT7B,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV,CAJc,CAKd;AACD,GANQ,EAMN,EANM,CAAT,CArDa,CA6Db;;AAEA,WAASyB,SAAT,CAAmB9B,IAAnB,EAAyBE,KAAzB,EAAgCE,OAAhC,EAAyC;AACvC2B,IAAAA,KAAK,CACF,GAAEnB,YAAY,CAACQ,GAAI,GAAEpB,IAAK,IAAGE,KAAM,IAAGE,OAAQ,UAASQ,YAAY,CAACO,KAAM,UAASP,YAAY,CAACC,GAAI,EADlG,CAAL,CAGGmB,IAHH,CAGSC,MAAD,IAAYA,MAAM,CAACC,IAAP,EAHpB,EAIGF,IAJH,CAISG,IAAD,IAAU;AACd;AACA,UAAIA,IAAI,CAAC,CAAD,CAAR,EAAa;AACXJ,QAAAA,KAAK,CACF,GAAEV,aAAa,CAACD,GAAI,OAAMe,IAAI,CAAC,CAAD,CAAJ,CAAQC,GAAI,QAAOD,IAAI,CAAC,CAAD,CAAJ,CAAQE,GAAI,kCAAiChB,aAAa,CAACR,GAAI,iBAD1G,CAAL,CAGGmB,IAHH,CAGSC,MAAD,IAAYA,MAAM,CAACC,IAAP,EAHpB,EAIGF,IAJH,CAISC,MAAD,IAAY;AAChB1B,UAAAA,gBAAgB,CAAC4B,IAAI,CAAC,CAAD,CAAJ,CAAQG,IAAT,CAAhB;AACA7B,UAAAA,iBAAiB,CAAC0B,IAAI,CAAC,CAAD,CAAJ,CAAQjC,KAAT,CAAjB;AACAS,UAAAA,mBAAmB,CAACwB,IAAI,CAAC,CAAD,CAAJ,CAAQ/B,OAAT,CAAnB;AACAL,UAAAA,cAAc,CAACkC,MAAD,CAAd;AACD,SATH;AAUD;AACF,KAlBH;AAmBD;;AAED,sBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE,oBAAC,WAAD;AACE,IAAA,WAAW,EAAEnC,WADf;AAEE,IAAA,IAAI,EAAEQ,aAFR;AAGE,IAAA,KAAK,EAAEE,cAHT;AAIE,IAAA,OAAO,EAAEE,gBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAWE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEV,IADR;AAEE,IAAA,KAAK,EAAEE,KAFT;AAGE,IAAA,OAAO,EAAEE,OAHX;AAIE,IAAA,gBAAgB,EAAEkB,gBAJpB;AAKE,IAAA,iBAAiB,EAAEI,iBALrB;AAME,IAAA,mBAAmB,EAAEC,mBANvB;AAOE,IAAA,YAAY,EAAEC,YAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CAFF;AAwBD;;AAED,eAAe/B,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport \"./App.css\"\nimport WeatherPage from \"./components/weatherPage\"\nimport SearchForm from \"./components/SearchForm\"\n\nfunction App() {\n  // Initialize variables using \"useSates\"\n  const [weatherData, setWeatherData] = useState([])\n\n  const [city, setCity] = useState(\"\")\n  const [state, setState] = useState(\"\")\n  const [country, setCountry] = useState(\"\")\n\n  // These hold values a little bit longer\n  const [cityDisplayed, setCityDisplayed] = useState(\"\")\n  const [stateDisplayed, setStateDisplayed] = useState(\"\")\n  const [countryDisplayed, setCountryDisplayed] = useState(\"\")\n\n  // Create an object that will hold keys to be used in the fetch fnctions.\n  const searchLatLon = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    cityName: city,\n    stateCode: \"\",\n    country: \"\",\n    limit: 1,\n    api: \"https://api.openweathermap.org/geo/1.0/direct?q=\",\n  }\n\n  let searchOptions = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    api: \"https://api.openweathermap.org/data/2.5/onecall?\",\n  }\n\n  // Create handleChange function to capture input value for city from the form.\n  function handleChangeCity(event) {\n    setCity(event.target.value)\n  }\n\n  // Create handleChange function to capture input value for city from the form.\n  function handleChangeState(event) {\n    setState(event.target.value)\n  }\n\n  // Create handleChange function to capture input value for country from the form.\n  function handleChangeCountry(event) {\n    setCountry(event.target.value)\n  }\n\n  // Create a handleSubmit function to send the input value to the getLatLon function.\n  function handleSubmit(event) {\n    event.preventDefault()\n    getLatLon(city, state, country)\n    setCity(\"\")\n    setState(\"\")\n    setCountry(\"\")\n  }\n\n  // useEffect function\n  useEffect(() => {\n    getLatLon()\n    setCity(\"\")\n    setState(\"\")\n    setCountry(\"\")\n    // eslint-disable-next-line\n  }, [])\n\n  // This function below takes two parameters: city and country's code, and spits latitude and longitude out. Then, the next fetch takes the lat and lon, and spits eather data for eight days.\n\n  function getLatLon(city, state, country) {\n    fetch(\n      `${searchLatLon.api}${city},${state},${country}&limit=${searchLatLon.limit}&appid=${searchLatLon.key}`\n    )\n      .then((result) => result.json())\n      .then((data) => {\n        // console.log(data[0])\n        if (data[0]) {\n          fetch(\n            `${searchOptions.api}lat=${data[0].lat}&lon=${data[0].lon}&exclude=minutely,hourly&appid=${searchOptions.key}&units=imperial`\n          )\n            .then((result) => result.json())\n            .then((result) => {\n              setCityDisplayed(data[0].name)\n              setStateDisplayed(data[0].state)\n              setCountryDisplayed(data[0].country)\n              setWeatherData(result)\n            })\n        }\n      })\n  }\n\n  return (\n\n    <div className=\"bg-black\">\n      {/* Weather data */}\n      <h1 className=\"text-blue-800\">Hello</h1>\n      <WeatherPage\n        weatherData={weatherData}\n        city={cityDisplayed}\n        state={stateDisplayed}\n        country={countryDisplayed}\n      />\n\n      {/* Search form */}\n      <SearchForm\n        city={city}\n        state={state}\n        country={country}\n        handleChangeCity={handleChangeCity}\n        handleChangeState={handleChangeState}\n        handleChangeCountry={handleChangeCountry}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}