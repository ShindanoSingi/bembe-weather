{"ast":null,"code":"import _slicedToArray from\"/Users/mymac/Desktop/GeneralAssembly/Post-Graduation-Projects/bembe-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import\"./App.css\";import WeatherPage from\"./components/weatherPage\";import SearchForm from\"./components/SearchForm\";function App(){// Initialize variables using \"useSates\"\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),weatherData=_useState2[0],setWeatherData=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),city=_useState4[0],setCity=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),state=_useState6[0],setState=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),country=_useState8[0],setCountry=_useState8[1];// These hold values a little bit longer\nvar _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),cityDisplayed=_useState10[0],setCityDisplayed=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),stateDisplayed=_useState12[0],setStateDisplayed=_useState12[1];var _useState13=useState(\"\"),_useState14=_slicedToArray(_useState13,2),countryDisplayed=_useState14[0],setCountryDisplayed=_useState14[1];// Create an object that will hold keys to be used in the fetch fnctions.\nvar searchLatLon={key:process.env.REACT_APP_GIPHY_KEY,cityName:city,stateCode:\"\",country:\"\",limit:1,api:\"https://api.openweathermap.org/geo/1.0/direct?q=\"};var searchOptions={key:process.env.REACT_APP_GIPHY_KEY,api:\"https://api.openweathermap.org/data/2.5/onecall?\"};// Create handleChange function to capture input value for city from the form.\nfunction handleChangeCity(event){setCity(event.target.value);}// Create handleChange function to capture input value for city from the form.\nfunction handleChangeState(event){setState(event.target.value);}// Create handleChange function to capture input value for country from the form.\nfunction handleChangeCountry(event){setCountry(event.target.value);}// Create a handleSubmit function to send the input value to the getLatLon function.\nfunction handleSubmit(event){event.preventDefault();getLatLon(city,state,country);setCity(\"\");setState(\"\");setCountry(\"\");}// useEffect function\nuseEffect(function(){getLatLon();setCity(\"\");setState(\"\");setCountry(\"\");// eslint-disable-next-line\n},[]);// This function below takes two parameters: city and country's code, and spits latitude and longitude out. Then, the next fetch takes the lat and lon, and spits eather data for eight days.\nfunction getLatLon(city,state,country){fetch(\"\".concat(searchLatLon.api).concat(city,\",\").concat(state,\",\").concat(country,\"&limit=\").concat(searchLatLon.limit,\"&appid=\").concat(searchLatLon.key)).then(function(result){return result.json();}).then(function(data){// console.log(data[0])\nif(data[0]){fetch(\"\".concat(searchOptions.api,\"lat=\").concat(data[0].lat,\"&lon=\").concat(data[0].lon,\"&exclude=minutely,hourly&appid=\").concat(searchOptions.key,\"&units=imperial\")).then(function(result){return result.json();}).then(function(result){setCityDisplayed(data[0].name);setStateDisplayed(data[0].state);setCountryDisplayed(data[0].country);setWeatherData(result);});}});}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(WeatherPage,{weatherData:weatherData,city:cityDisplayed,state:stateDisplayed,country:countryDisplayed}),/*#__PURE__*/React.createElement(SearchForm,{city:city,state:state,country:country,handleChangeCity:handleChangeCity,handleChangeState:handleChangeState,handleChangeCountry:handleChangeCountry,handleSubmit:handleSubmit}));}export default App;","map":{"version":3,"sources":["/Users/mymac/Desktop/GeneralAssembly/Post-Graduation-Projects/bembe-weather/src/App.js"],"names":["React","useState","useEffect","WeatherPage","SearchForm","App","weatherData","setWeatherData","city","setCity","state","setState","country","setCountry","cityDisplayed","setCityDisplayed","stateDisplayed","setStateDisplayed","countryDisplayed","setCountryDisplayed","searchLatLon","key","process","env","REACT_APP_GIPHY_KEY","cityName","stateCode","limit","api","searchOptions","handleChangeCity","event","target","value","handleChangeState","handleChangeCountry","handleSubmit","preventDefault","getLatLon","fetch","then","result","json","data","lat","lon","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport \"./App.css\"\nimport WeatherPage from \"./components/weatherPage\"\nimport SearchForm from \"./components/SearchForm\"\n\nfunction App() {\n  // Initialize variables using \"useSates\"\n  const [weatherData, setWeatherData] = useState([])\n\n  const [city, setCity] = useState(\"\")\n  const [state, setState] = useState(\"\")\n  const [country, setCountry] = useState(\"\")\n\n  // These hold values a little bit longer\n  const [cityDisplayed, setCityDisplayed] = useState(\"\")\n  const [stateDisplayed, setStateDisplayed] = useState(\"\")\n  const [countryDisplayed, setCountryDisplayed] = useState(\"\")\n\n  // Create an object that will hold keys to be used in the fetch fnctions.\n  const searchLatLon = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    cityName: city,\n    stateCode: \"\",\n    country: \"\",\n    limit: 1,\n    api: \"https://api.openweathermap.org/geo/1.0/direct?q=\",\n  }\n\n  let searchOptions = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    api: \"https://api.openweathermap.org/data/2.5/onecall?\",\n  }\n\n  // Create handleChange function to capture input value for city from the form.\n  function handleChangeCity(event) {\n    setCity(event.target.value)\n  }\n\n  // Create handleChange function to capture input value for city from the form.\n  function handleChangeState(event) {\n    setState(event.target.value)\n  }\n\n  // Create handleChange function to capture input value for country from the form.\n  function handleChangeCountry(event) {\n    setCountry(event.target.value)\n  }\n\n  // Create a handleSubmit function to send the input value to the getLatLon function.\n  function handleSubmit(event) {\n    event.preventDefault()\n    getLatLon(city, state, country)\n    setCity(\"\")\n    setState(\"\")\n    setCountry(\"\")\n  }\n\n  // useEffect function\n  useEffect(() => {\n    getLatLon()\n    setCity(\"\")\n    setState(\"\")\n    setCountry(\"\")\n    // eslint-disable-next-line\n  }, [])\n\n  // This function below takes two parameters: city and country's code, and spits latitude and longitude out. Then, the next fetch takes the lat and lon, and spits eather data for eight days.\n\n  function getLatLon(city, state, country) {\n    fetch(\n      `${searchLatLon.api}${city},${state},${country}&limit=${searchLatLon.limit}&appid=${searchLatLon.key}`\n    )\n      .then((result) => result.json())\n      .then((data) => {\n        // console.log(data[0])\n        if (data[0]) {\n          fetch(\n            `${searchOptions.api}lat=${data[0].lat}&lon=${data[0].lon}&exclude=minutely,hourly&appid=${searchOptions.key}&units=imperial`\n          )\n            .then((result) => result.json())\n            .then((result) => {\n              setCityDisplayed(data[0].name)\n              setStateDisplayed(data[0].state)\n              setCountryDisplayed(data[0].country)\n              setWeatherData(result)\n            })\n        }\n      })\n  }\n\n  return (\n    <div>\n      {/* Weather data */}\n      <WeatherPage\n        weatherData={weatherData}\n        city={cityDisplayed}\n        state={stateDisplayed}\n        country={countryDisplayed}\n      />\n\n      {/* Search form */}\n      <SearchForm\n        city={city}\n        state={state}\n        country={country}\n        handleChangeCity={handleChangeCity}\n        handleChangeState={handleChangeState}\n        handleChangeCountry={handleChangeCountry}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}